
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000000 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 /tmp/ccFzAFBk.o
f1e0f85f l       *ABS*	00000000 BootRAM
080002f4 l       .text	00000000 LoopCopyDataInit
080002ec l       .text	00000000 CopyDataInit
08000308 l       .text	00000000 LoopFillZerobss
08000302 l       .text	00000000 FillZerobss
0800031a l       .text	00000000 LoopForever
08000330 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 system_stm32f30x.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
08000330  w    F .text	00000002 RTC_Alarm_IRQHandler
08000330  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08000330  w    F .text	00000002 TIM8_CC_IRQHandler
08000330  w    F .text	00000002 DebugMon_Handler
08000330  w    F .text	00000002 TIM1_CC_IRQHandler
08000330  w    F .text	00000002 HardFault_Handler
08000330  w    F .text	00000002 USB_HP_IRQHandler
08000330  w    F .text	00000002 SysTick_Handler
08000330  w    F .text	00000002 PVD_IRQHandler
0800034c g       .text	00000000 _sidata
08000330  w    F .text	00000002 PendSV_Handler
08000330  w    F .text	00000002 NMI_Handler
20000000 g       .text	00000000 __exidx_end
08000330  w    F .text	00000002 EXTI3_IRQHandler
0800034c g       .text	00000000 _etext
20000000 g       .bss	00000000 _sbss
08000330  w    F .text	00000002 EXTI0_IRQHandler
08000330  w    F .text	00000002 I2C2_EV_IRQHandler
08000330  w    F .text	00000002 FPU_IRQHandler
08000330  w    F .text	00000002 EXTI2_TS_IRQHandler
08000330  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
08000330  w    F .text	00000002 UsageFault_Handler
08000330  w    F .text	00000002 ADC1_2_IRQHandler
20000000 g       .data	00000000 _sdata
08000330  w    F .text	00000002 SPI1_IRQHandler
08000330  w    F .text	00000002 TIM6_DAC_IRQHandler
08000330  w    F .text	00000002 TIM8_UP_IRQHandler
20000000 g       .text	00000000 __exidx_start
08000188 g     F .text	00000050 __libc_init_array
08000330  w    F .text	00000002 DMA2_Channel2_IRQHandler
08000330  w    F .text	00000002 DMA1_Channel4_IRQHandler
08000334 g     F .text	00000000 _init
08000330  w    F .text	00000002 USART3_IRQHandler
20000000 g       .bss	00000000 _ebss
08000330  w    F .text	00000002 DMA1_Channel7_IRQHandler
080002e8  w    F .text	00000034 Reset_Handler
08000330  w    F .text	00000002 CAN1_RX1_IRQHandler
08000330  w    F .text	00000002 UART5_IRQHandler
08000330  w    F .text	00000002 ADC3_IRQHandler
08000330  w    F .text	00000002 TIM4_IRQHandler
08000330  w    F .text	00000002 DMA2_Channel1_IRQHandler
08000330  w    F .text	00000002 I2C1_EV_IRQHandler
08000330  w    F .text	00000002 DMA1_Channel6_IRQHandler
08000330  w    F .text	00000002 UART4_IRQHandler
08000330  w    F .text	00000002 DMA2_Channel4_IRQHandler
08000330  w    F .text	00000002 TIM3_IRQHandler
08000330  w    F .text	00000002 RCC_IRQHandler
20000000 g       .bss	00000000 _bss
08000330  w    F .text	00000002 DMA1_Channel1_IRQHandler
08000330 g       .text	00000002 Default_Handler
08000330  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08000330  w    F .text	00000002 EXTI15_10_IRQHandler
08000330  w    F .text	00000002 TIM7_IRQHandler
08000330  w    F .text	00000002 EXTI9_5_IRQHandler
08000330  w    F .text	00000002 TAMPER_STAMP_IRQHandler
08000330  w    F .text	00000002 RTC_WKUP_IRQHandler
08000330  w    F .text	00000002 SPI2_IRQHandler
08000330  w    F .text	00000002 MemManage_Handler
080001d8 g     F .text	00000012 main
08000330  w    F .text	00000002 SVC_Handler
08000330  w    F .text	00000002 DMA2_Channel5_IRQHandler
08000330  w    F .text	00000002 DMA1_Channel5_IRQHandler
08000330  w    F .text	00000002 USB_LP_IRQHandler
08000330  w    F .text	00000002 EXTI4_IRQHandler
08000330  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
080001ec g     F .text	000000fc SystemInit
08000340 g     F .text	00000000 _fini
08000330  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08000330  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
08000330  w    F .text	00000002 DMA1_Channel3_IRQHandler
08000330  w    F .text	00000002 ADC4_IRQHandler
08000330  w    F .text	00000002 WWDG_IRQHandler
20000000 g       .data	00000000 _data
08000330  w    F .text	00000002 TIM2_IRQHandler
08000330  w    F .text	00000002 COMP7_IRQHandler
20008000 g       *ABS*	00000000 _estack
08000330  w    F .text	00000002 COMP1_2_3_IRQHandler
08000330  w    F .text	00000002 EXTI1_IRQHandler
20000000 g       .data	00000000 _edata
08000330  w    F .text	00000002 USART2_IRQHandler
08000330  w    F .text	00000002 COMP4_5_6_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000330  w    F .text	00000002 I2C2_ER_IRQHandler
08000330  w    F .text	00000002 DMA1_Channel2_IRQHandler
08000330  w    F .text	00000002 TIM8_BRK_IRQHandler
08000330  w    F .text	00000002 CAN1_SCE_IRQHandler
08000330  w    F .text	00000002 FLASH_IRQHandler
08000330  w    F .text	00000002 BusFault_Handler
08000330  w    F .text	00000002 USART1_IRQHandler
08000330  w    F .text	00000002 SPI3_IRQHandler
08000330  w    F .text	00000002 I2C1_ER_IRQHandler
08000330  w    F .text	00000002 USBWakeUp_IRQHandler
08000330  w    F .text	00000002 DMA2_Channel3_IRQHandler
08000330  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08000188 <__libc_init_array>:
 8000188:	b570      	push	{r4, r5, r6, lr}
 800018a:	4e0f      	ldr	r6, [pc, #60]	; (80001c8 <__libc_init_array+0x40>)
 800018c:	4d0f      	ldr	r5, [pc, #60]	; (80001cc <__libc_init_array+0x44>)
 800018e:	1b76      	subs	r6, r6, r5
 8000190:	10b6      	asrs	r6, r6, #2
 8000192:	bf18      	it	ne
 8000194:	2400      	movne	r4, #0
 8000196:	d005      	beq.n	80001a4 <__libc_init_array+0x1c>
 8000198:	3401      	adds	r4, #1
 800019a:	f855 3b04 	ldr.w	r3, [r5], #4
 800019e:	4798      	blx	r3
 80001a0:	42a6      	cmp	r6, r4
 80001a2:	d1f9      	bne.n	8000198 <__libc_init_array+0x10>
 80001a4:	4e0a      	ldr	r6, [pc, #40]	; (80001d0 <__libc_init_array+0x48>)
 80001a6:	4d0b      	ldr	r5, [pc, #44]	; (80001d4 <__libc_init_array+0x4c>)
 80001a8:	1b76      	subs	r6, r6, r5
 80001aa:	f000 f8c3 	bl	8000334 <_init>
 80001ae:	10b6      	asrs	r6, r6, #2
 80001b0:	bf18      	it	ne
 80001b2:	2400      	movne	r4, #0
 80001b4:	d006      	beq.n	80001c4 <__libc_init_array+0x3c>
 80001b6:	3401      	adds	r4, #1
 80001b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80001bc:	4798      	blx	r3
 80001be:	42a6      	cmp	r6, r4
 80001c0:	d1f9      	bne.n	80001b6 <__libc_init_array+0x2e>
 80001c2:	bd70      	pop	{r4, r5, r6, pc}
 80001c4:	bd70      	pop	{r4, r5, r6, pc}
 80001c6:	bf00      	nop
	...

080001d8 <main>:
int main(void)
{
 80001d8:	b508      	push	{r3, lr}
    int i;

    SystemInit();
 80001da:	f000 f807 	bl	80001ec <SystemInit>

    while (1) {
        for (i = 0; i < 5; i++) {
            __asm volatile ("NOP");
 80001de:	bf00      	nop
 80001e0:	bf00      	nop
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	bf00      	nop
 80001e8:	e7f9      	b.n	80001de <main+0x6>
	...

080001ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001ec:	4a39      	ldr	r2, [pc, #228]	; (80002d4 <SystemInit+0xe8>)
 80001ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80001f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001fa:	4b37      	ldr	r3, [pc, #220]	; (80002d8 <SystemInit+0xec>)
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	f042 0201 	orr.w	r2, r2, #1
 8000202:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000204:	6859      	ldr	r1, [r3, #4]
 8000206:	4a35      	ldr	r2, [pc, #212]	; (80002dc <SystemInit+0xf0>)
 8000208:	400a      	ands	r2, r1
 800020a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000212:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000216:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800021e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000220:	685a      	ldr	r2, [r3, #4]
 8000222:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000226:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800022a:	f022 020f 	bic.w	r2, r2, #15
 800022e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000230:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000232:	4a2b      	ldr	r2, [pc, #172]	; (80002e0 <SystemInit+0xf4>)
{
 8000234:	b082      	sub	sp, #8
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000236:	400a      	ands	r2, r1
 8000238:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800023e:	9200      	str	r2, [sp, #0]
 8000240:	9201      	str	r2, [sp, #4]
 #if defined (PLL_SOURCE_HSE)
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 #elif defined (PLL_SOURCE_HSE_BYPASS)
  /* HSE oscillator bypassed with external clock */    
  RCC->CR |= (uint32_t)(RCC_CR_HSEON | RCC_CR_HSEBYP);
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8000248:	601a      	str	r2, [r3, #0]
 #endif /* PLL_SOURCE_HSE */
   
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000250:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 8000252:	9a00      	ldr	r2, [sp, #0]
 8000254:	3201      	adds	r2, #1
 8000256:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000258:	9a01      	ldr	r2, [sp, #4]
 800025a:	b91a      	cbnz	r2, 8000264 <SystemInit+0x78>
 800025c:	9a00      	ldr	r2, [sp, #0]
 800025e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000262:	d1f2      	bne.n	800024a <SystemInit+0x5e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800026a:	bf18      	it	ne
 800026c:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800026e:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000270:	9a01      	ldr	r2, [sp, #4]
 8000272:	2a01      	cmp	r2, #1
 8000274:	d005      	beq.n	8000282 <SystemInit+0x96>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000276:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <SystemInit+0xe8>)
 8000278:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800027c:	609a      	str	r2, [r3, #8]
}
 800027e:	b002      	add	sp, #8
 8000280:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8000282:	4a18      	ldr	r2, [pc, #96]	; (80002e4 <SystemInit+0xf8>)
 8000284:	2112      	movs	r1, #18
 8000286:	6011      	str	r1, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000288:	685a      	ldr	r2, [r3, #4]
 800028a:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800028c:	685a      	ldr	r2, [r3, #4]
 800028e:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000296:	605a      	str	r2, [r3, #4]
    
   
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000298:	685a      	ldr	r2, [r3, #4]
 800029a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800029e:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL9);
 80002a0:	685a      	ldr	r2, [r3, #4]
 80002a2:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80002a6:	605a      	str	r2, [r3, #4]
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002ae:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002b0:	6819      	ldr	r1, [r3, #0]
 80002b2:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <SystemInit+0xec>)
 80002b4:	0189      	lsls	r1, r1, #6
 80002b6:	d5fb      	bpl.n	80002b0 <SystemInit+0xc4>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002b8:	6851      	ldr	r1, [r2, #4]
 80002ba:	f021 0103 	bic.w	r1, r1, #3
 80002be:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80002c0:	6851      	ldr	r1, [r2, #4]
 80002c2:	f041 0102 	orr.w	r1, r1, #2
 80002c6:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80002c8:	685a      	ldr	r2, [r3, #4]
 80002ca:	f002 020c 	and.w	r2, r2, #12
 80002ce:	2a08      	cmp	r2, #8
 80002d0:	d1fa      	bne.n	80002c8 <SystemInit+0xdc>
 80002d2:	e7d0      	b.n	8000276 <SystemInit+0x8a>
 80002d4:	e000ed00 	.word	0xe000ed00
 80002d8:	40021000 	.word	0x40021000
 80002dc:	f87fc00c 	.word	0xf87fc00c
 80002e0:	ff00fccc 	.word	0xff00fccc
 80002e4:	40022000 	.word	0x40022000

080002e8 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80002e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80002ea:	e003      	b.n	80002f4 <LoopCopyDataInit>

080002ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 80002ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80002f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80002f2:	3104      	adds	r1, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80002f4:	480a      	ldr	r0, [pc, #40]	; (8000320 <LoopForever+0x6>)
	ldr	r3, =_edata
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <LoopForever+0xa>)
	adds	r2, r0, r1
 80002f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80002fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80002fc:	d3f6      	bcc.n	80002ec <CopyDataInit>
	ldr	r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <LoopForever+0xe>)
	b	LoopFillZerobss
 8000300:	e002      	b.n	8000308 <LoopFillZerobss>

08000302 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000302:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000304:	f842 3b04 	str.w	r3, [r2], #4

08000308 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <LoopForever+0x12>)
	cmp	r2, r3
 800030a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800030c:	d3f9      	bcc.n	8000302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800030e:	f7ff ff6d 	bl	80001ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000312:	f7ff ff39 	bl	8000188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000316:	f7ff ff5f 	bl	80001d8 <main>

0800031a <LoopForever>:

LoopForever:
    b LoopForever
 800031a:	e7fe      	b.n	800031a <LoopForever>
	ldr	r3, =_sidata
 800031c:	0800034c 	.word	0x0800034c
	ldr	r0, =_sdata
 8000320:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000324:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000328:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 800032c:	20000000 	.word	0x20000000

08000330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC1_2_IRQHandler>
	...

08000334 <_init>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr

08000340 <_fini>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr
